def make_CNN_classifier(n_filters=16, n_outputs=1):
  Conv2D = functools.partial(tf.keras.layers.Conv2D, activation='relu')
  MaxPool2D = tf.keras.layers.MaxPool2D
  BatchNormalization = tf.keras.layers.BatchNormalization
  Flatten = tf.keras.layers.Flatten
  Dense = functools.partial(tf.keras.layers.Dense, activation='relu')

  model = tf.keras.Sequential([ 
    Conv2D(filters=1*n_filters, kernel_size=3,  strides=1, input_shape=(256, 256, 3)),
    MaxPool2D(pool_size=(2,2)),
    BatchNormalization(),
    
    Conv2D(filters=2*n_filters, kernel_size=3,  strides=1),
    MaxPool2D(pool_size=(2,2)),
    BatchNormalization(),

    Conv2D(filters=1*n_filters, kernel_size=3,  strides=1),
    MaxPool2D(pool_size=(2,2)),
    BatchNormalization(),

    Flatten(),
      
    Dense(256),
    Dense(n_outputs, activation='sigmoid'),
  ])
  return model

CNN_model = make_CNN_classifier(n_filters=32, n_outputs=1)

# compiling the model
CNN_model.compile(tf.keras.optimizers.SGD(learning_rate=1e-2), loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])